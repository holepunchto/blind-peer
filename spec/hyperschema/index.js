// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @blind-peer/request-mailbox
const encoding0 = {
  preencode (state, m) {
    let flags = 0
    if (m.blockEncryptionKey) flags |= 1

    c.fixed32.preencode(state, m.id)
    c.fixed32.preencode(state, m.autobase)
    c.uint.preencode(state, flags)

    if (m.blockEncryptionKey) c.fixed32.preencode(state, m.blockEncryptionKey)
  },
  encode (state, m) {
    let flags = 0
    if (m.blockEncryptionKey) flags |= 1

    c.fixed32.encode(state, m.id)
    c.fixed32.encode(state, m.autobase)
    c.uint.encode(state, flags)

    if (m.blockEncryptionKey) c.fixed32.encode(state, m.blockEncryptionKey)
  },
  decode (state) {
    const res = {}
    res.id = null
    res.autobase = null
    res.blockEncryptionKey = null

    res.id = c.fixed32.decode(state)
    res.autobase = c.fixed32.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.blockEncryptionKey = c.fixed32.decode(state)

    return res
  }
}

// @blind-peer/response-mailbox
const encoding1 = {
  preencode (state, m) {
    let flags = 0
    if (m.open) flags |= 1

    c.fixed32.preencode(state, m.writer)
    c.uint.preencode(state, flags)
  },
  encode (state, m) {
    let flags = 0
    if (m.open) flags |= 1

    c.fixed32.encode(state, m.writer)
    c.uint.encode(state, flags)
  },
  decode (state) {
    const res = {}
    res.writer = null
    res.open = false

    res.writer = c.fixed32.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.open = true

    return res
  }
}

// @blind-peer/request-post
const encoding2 = {
  preencode (state, m) {
    let flags = 0
    if (m.message) flags |= 1

    c.fixed32.preencode(state, m.id)
    c.uint.preencode(state, flags)

    if (m.message) c.buffer.preencode(state, m.message)
  },
  encode (state, m) {
    let flags = 0
    if (m.message) flags |= 1

    c.fixed32.encode(state, m.id)
    c.uint.encode(state, flags)

    if (m.message) c.buffer.encode(state, m.message)
  },
  decode (state) {
    const res = {}
    res.id = null
    res.message = null

    res.id = c.fixed32.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.message = c.buffer.decode(state)

    return res
  }
}

// @blind-peer/response-post
const encoding3 = {
  preencode (state, m) {

  },
  encode (state, m) {

  },
  decode (state) {
    const res = {}

    return res
  }
}

// @blind-peer/mailbox
const encoding4 = {
  preencode (state, m) {
    let flags = 0
    if (m.blockEncryptionKey) flags |= 1

    c.fixed32.preencode(state, m.id)
    c.fixed32.preencode(state, m.autobase)
    c.fixed32.preencode(state, m.writer)
    c.uint.preencode(state, flags)

    if (m.blockEncryptionKey) c.fixed32.preencode(state, m.blockEncryptionKey)
  },
  encode (state, m) {
    let flags = 0
    if (m.blockEncryptionKey) flags |= 1

    c.fixed32.encode(state, m.id)
    c.fixed32.encode(state, m.autobase)
    c.fixed32.encode(state, m.writer)
    c.uint.encode(state, flags)

    if (m.blockEncryptionKey) c.fixed32.encode(state, m.blockEncryptionKey)
  },
  decode (state) {
    const res = {}
    res.id = null
    res.autobase = null
    res.writer = null
    res.blockEncryptionKey = null

    res.id = c.fixed32.decode(state)
    res.autobase = c.fixed32.decode(state)
    res.writer = c.fixed32.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.blockEncryptionKey = c.fixed32.decode(state)

    return res
  }
}

function getStructByName (name) {
  switch (name) {
    case '@blind-peer/request-mailbox': return encoding0
    case '@blind-peer/response-mailbox': return encoding1
    case '@blind-peer/request-post': return encoding2
    case '@blind-peer/response-post': return encoding3
    case '@blind-peer/mailbox': return encoding4
    default: throw new Error('Encoder not found ' + name)
  }
}

function resolveStruct (name, v = VERSION) {
  const enc = getStructByName(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

module.exports = { resolveStruct, version }
