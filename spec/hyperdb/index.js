// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

const { IndexEncoder, c } = require('hyperdb/runtime')

const { version, resolveStruct } = require('./messages.js')

// '@blind-peer/mailbox' collection key
const collection64_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 64 })

function collection64_indexify (record) {
  const a = record.autobase
  return a === undefined ? [] : [a]
}

// '@blind-peer/mailbox' reconstruction function
function collection64_reconstruct (version, keyBuf, valueBuf) {
  const key = collection64_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@blind-peer/mailbox/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    autobase: key[0],
    ...value
  }
}
// '@blind-peer/mailbox' key reconstruction function
function collection64_reconstruct_key (keyBuf) {
  const key = collection64_key.decode(keyBuf)
  return {
    autobase: key[0]
  }
}

// '@blind-peer/mailbox'
const collection64 = {
  name: '@blind-peer/mailbox',
  id: 64,
  encodeKey (record) {
    const key = [record.autobase]
    return collection64_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection64_key.encodeRange({
      gt: gt ? collection64_indexify(gt) : null,
      lt: lt ? collection64_indexify(lt) : null,
      gte: gte ? collection64_indexify(gte) : null,
      lte: lte ? collection64_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@blind-peer/mailbox/value', version), record)
  },
  trigger: null,
  reconstruct: collection64_reconstruct,
  reconstructKey: collection64_reconstruct_key,
  indexes: []
}

module.exports = {
  version,
  collections: [
    collection64
  ],
  indexes: [
  ],
  resolveCollection,
  resolveIndex
}

function resolveCollection (name) {
  switch (name) {
    case '@blind-peer/mailbox': return collection64
    default: return null
  }
}

function resolveIndex (name) {
  switch (name) {
    default: return null
  }
}
