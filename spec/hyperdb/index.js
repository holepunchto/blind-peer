// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

const { IndexEncoder, c } = require('hyperdb/runtime')

const { version, resolveStruct } = require('./messages.js')

// '@blind-mailbox/mailbox' collection key
const collection0_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 0 })

function collection0_indexify (record) {
  const a = record.autobase
  return a === undefined ? [] : [a]
}

// '@blind-mailbox/mailbox' reconstruction function
function collection0_reconstruct (version, keyBuf, valueBuf) {
  const key = collection0_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@blind-mailbox/mailbox/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    autobase: key[0],
    ...value
  }
}
// '@blind-mailbox/mailbox' key reconstruction function
function collection0_reconstruct_key (keyBuf) {
  const key = collection0_key.decode(keyBuf)
  return {
    autobase: key[0]
  }
}

// '@blind-mailbox/mailbox'
const collection0 = {
  name: '@blind-mailbox/mailbox',
  id: 0,
  encodeKey (record) {
    const key = [record.autobase]
    return collection0_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection0_key.encodeRange({
      gt: gt ? collection0_indexify(gt) : null,
      lt: lt ? collection0_indexify(lt) : null,
      gte: gte ? collection0_indexify(gte) : null,
      lte: lte ? collection0_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@blind-mailbox/mailbox/value', version), record)
  },
  trigger: null,
  reconstruct: collection0_reconstruct,
  reconstructKey: collection0_reconstruct_key,
  indexes: []
}

module.exports = {
  version,
  collections: [
    collection0
  ],
  indexes: [
  ],
  resolveCollection,
  resolveIndex
}

function resolveCollection (name) {
  switch (name) {
    case '@blind-mailbox/mailbox': return collection0
    default: return null
  }
}

function resolveIndex (name) {
  switch (name) {
    default: return null
  }
}
